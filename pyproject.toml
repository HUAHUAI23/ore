[build-system]
requires = ["setuptools>=80.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ore"
version = "0.1.0"
description = "AI工作流引擎和Web后端 - 集成LangChain和FastAPI"
authors = [{name = "lim", email = "huahua1319873800@outlook.com"}]
license = {text = "Apache License 2.0"}
readme = "README.md"
requires-python = ">=3.10"
keywords = ["ai", "workflow", "langchain", "fastapi"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# 核心运行时依赖
dependencies = [
    # 环境配置
    "python-dotenv>=1.0.0",
    
    # LangChain依赖
    "langchain>=0.3.0",
    "langchain-core>=0.3.0", 
    "langchain-openai>=0.2.4",
    
    # Web框架
    "fastapi[standard]>=0.116.1", 
    
    # 数据库ORM
    "sqlmodel>=0.0.24",              # SQLModel for database ORM
    "sqlalchemy[asyncio]>=2.0.36",   # Async SQLAlchemy support
    "pydantic>=2.10.0",
    # 数据库驱动
    "psycopg2-binary>=2.9.9",       # PostgreSQL adapter (sync)
    "asyncpg>=0.29.0",               # Async PostgreSQL adapter
    "alembic>=1.13.0",               # Database migrations
    
    # 配置
    "pydantic-settings>=2.10.1",
    
    # 命令行工具
    "click>=8.0.0",
    
    # JWT认证和现代化安全依赖
    "python-jose[cryptography]>=3.3.0",
    "argon2-cffi>=23.1.0",           # 现代化的 Argon2 密码哈希
    "email-validator>=2.0.0",
    "cryptography>=41.0.0",          # 现代化的加密库
]

# 可选依赖组
[project.optional-dependencies]
# 开发依赖
dev = [
    "pip-tools>=7.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "ruff>=0.1.0",                   # 现代化的 linter，可以替代 flake8
]

# 测试依赖
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "fastapi[testing]>=0.116.1",
    "sqlalchemy-utils>=0.41.0",
]

# 生产部署依赖
prod = [
    "gunicorn>=21.2.0",              # WSGI服务器
    "uvloop>=0.19.0",                # 高性能事件循环
]

# 文档依赖
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]

[project.urls]
Homepage = "https://github.com/HUAHUAI23/ore"
Repository = "https://github.com/HUAHUAI23/ore.git"
Documentation = "https://ore.readthedocs.io"
Issues = "https://github.com/HUAHUAI23/ore/issues"

# 命令行入口点
[project.scripts]
workflow-engine = "workflow_engine.examples.tree_workflow:cli_main"
workflow-server = "backend.cli:start_server"

# 包发现配置
[tool.setuptools.packages.find]
include = ["workflow_engine*", "backend*", "config*"]
exclude = ["tests*", "temp*", "scripts*", "docs*", "txt*"]

# 包含额外文件
[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md"]

# 工具配置
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["workflow_engine", "backend"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

# Ruff 配置 (现代化的 Python linter)
[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]